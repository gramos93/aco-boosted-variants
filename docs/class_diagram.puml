@startuml

class Main {
  logger: Logger
  ui: UI
  world: GridWorld
  run()
}

class GridWorld {
  world: 2D Array
  strategy: SearchAlgorithm
  vision: 2D Array
  explored: SearchPath
  search(strategy)
}

class SearchPath {
  path: List<SearchNode>
  add_node(SearchNode)
  calculate_cost()
  is_valid()
}

class SearchNode {
  coordinates: tuple<int,int>
  cost: int
  parent: SearchNode
}

class Logger {
  log_info()
  log_error()
}

class UI {
  display()
}

interface SearchAlgorithm {
  path: SearchPath
  search()
  get_solution(()
}

class ConcreteSearchAlgorithm {
  path: SearchPath
  concrete_data_struct: 2D Array
  search()
  get_solution()
  concrete_heuristic()
}

Main --> GridWorld : init
Main --> UI : init
Main --> Logger : init
GridWorld --> SearchAlgorithm : search with
SearchAlgorithm --> SearchPath : finds
SearchPath --> SearchNode : contains
ConcreteSearchAlgorithm --|> SearchAlgorithm : interface for various concrete search strategies

@enduml
